#library "WEAPONS"
#include "zcommon.acs"
#include "SMMP_DEFINES.ECH"
// You need GDCC-ACC to compile this.

int client_class = 0;
str class_states[NumClasses] =
{
	"Marine",
	"Tails",
	"Duke"
};

struct SMMPAmmo
{
	str actor;
	str name;
}

enum
{
	AMMO_NONE,
	AMMO_MECH,
	AMMO_SPREAD,
	AMMO_PROTON,
	AMMO_CELL,
	AMMO_HELLFIRE,
	AMMO_GASOLINE,
	AMMO_FUSION,
	AMMO_MAX
}

SMMPAmmo ammo_types[AMMO_MAX] = {
	{ "None",			"No Ammo" },		// AMMO_NONE
	{ "MechAmmo",		"Mech Ammo" }, 		// AMMO_MECH
	{ "SpreadAmmo",		"Spread Ammo" },	// AMMO_SPREAD
	{ "ProtonAmmo",		"Proton Ammo" },	// AMMO_PROTON
	{ "CellAmmo",		"Cell Ammo" },		// AMMO_CELL
	{ "HellFireAmmo",	"Hellfire Ammo" },	// AMMO_HELLFIRE
	{ "GasolineAmmo",	"Gasoline" },		// AMMO_GASOLINE
	{ "FusionAmmo",	"Fusion Ammo" }		// AMMO_FUSION
};

struct SMMPWeapon
{
	str actor;
	str name;
	int ammo1_type;
	int ammo1_count;
	int ammo2_type;
	int ammo2_count;
	str clip_actor;
}

#define NumWeapons 14
SMMPWeapon class_weapons[NumWeapons][NumClasses] = 
{
	{ // Shotgun - 0
		{ "NewShotgun",			"Remington 870 Magnum",				AMMO_SPREAD, 8,	AMMO_NONE, 0,	"None" },
		{ "PIPS",				"Plasma Injection Pulse Shotgun", 	AMMO_SPREAD, 8,	AMMO_NONE, 0,	"PIPSClip" },
		{ "DukeShotgun",		"Custom Winchester 1300 Defender",	AMMO_SPREAD, 8,	AMMO_NONE, 0,	"None" },
	},
	{ // SSG - 1
		{ "SM_SuperShotgun",	"Super Shotgun",					AMMO_SPREAD, 16, AMMO_NONE, 0,	"None" },
		{ "Keyring",			"Keyring", 							AMMO_SPREAD, 16, AMMO_NONE, 0,	"None" },
		{ "SPAS-12",			"SPAS-12",							AMMO_SPREAD, 16, AMMO_NONE, 0,	"None" },
	},
	{ // Chaingun - 2
		{ "SM_Chaingun",		"T23-A Explosive Minigun",			AMMO_MECH, 32, AMMO_NONE, 0,	"None" },
		{ "BCF-2Repeaters",		"BCF-2 Repeaters", 					AMMO_MECH, 32, AMMO_NONE, 0,	"None" },
		{ "RipperChaingun",		"EDF ''Ripper'' Chaingun",			AMMO_MECH, 32, AMMO_NONE, 0,	"None" },
	},
	{ // MP40 - 3
		{ "MP40",				"Maschinenpistole 40",				AMMO_MECH, 30, AMMO_NONE, 0,	"MP40Clip" },
		{ "MP40",				"Maschinenpistole 40", 				AMMO_MECH, 30, AMMO_NONE, 0,	"MP40Clip" },
		{ "M1911",				"Colt M1911",						AMMO_MECH, 30, AMMO_NONE, 0,	"Duke64Clip" },
	},
	{ // Grenade Launcher - 4
		{ "ProtonGL",			"FG-32 ''Vortex'' Launcher",		AMMO_PROTON, 2, AMMO_NONE, 0,	"None" },
		{ "StickyBombs",		"Sticky Bombs", 					AMMO_PROTON, 2, AMMO_NONE, 0,	"None" },
		{ "DukeGL",				"M32 Grenade Launcher",				AMMO_PROTON, 2, AMMO_NONE, 0,	"None" },
	},
	{ // Torpedo Launcher - 5
		{ "ProtonTL",			"A55-H013 ''Inferno'' Launcher",	AMMO_PROTON, 2, AMMO_NONE, 0,	"None" },
		{ "ProtonTL",			"Placeholder Torpedo Launcher", 	AMMO_PROTON, 2, AMMO_NONE, 0,	"None" },
		{ "DukeRPG",			"RPG",								AMMO_PROTON, 2, AMMO_NONE, 0,	"None" },
	},
	{ // Plasma Rifle - 6
		{ "PlasmaCannon",		"PL-8 ''Sunfire'' Rifle",			AMMO_CELL, 40, AMMO_NONE, 0,	"None" },
		{ "HaloPlasmaRifle",	"Type-25 Directed Energy Rifle", 	AMMO_CELL, 40, AMMO_NONE, 0,	"None" },
		{ "Freezethrower",		"Freezethrower",					AMMO_CELL, 40, AMMO_NONE, 0,	"None" },
	},
	{ // Stinger - 7
		{ "Stinger",			"D-12 ''Stinger'' Laser",			AMMO_CELL, 20, AMMO_NONE, 0,	"None" },
		{ "Cyclone",			"SNC-06 ''Cyclone'' Beam Pistol", 	AMMO_CELL, 20, AMMO_NONE, 0,	"CycloneClip" },
		{ "Expander",			"Microwave Expander",				AMMO_CELL, 20, AMMO_NONE, 0,	"None" },
	},
	{ // BFG9000 - 8
		{ "BFG_SMMP",			"BFG 9000",							AMMO_CELL, 40, AMMO_NONE, 0,	"None" },
		{ "Supra",				"Supra", 							AMMO_CELL, 40, AMMO_NONE, 0,	"None" },
		{ "EnergyCannon",		"Energy Cannon",					AMMO_CELL, 40, AMMO_NONE, 0,	"None" },
	},
	{ // ElementalSSG - 9
		{ "FireSSG",			"Elemental SSG (Fire)",				AMMO_SPREAD, 16, AMMO_NONE, 0,	"None" },
		{ "IceSSG",				"Elemental SSG (Ice)", 				AMMO_SPREAD, 16, AMMO_NONE, 0,	"None" },
		{ "AcidSprayer",		"Acid Sprayer",						AMMO_SPREAD, 16, AMMO_NONE, 0,	"None" },
	},
	{ // Railgun - 10
		{ "Railgun",			"Railgun",							AMMO_CELL, 40, AMMO_NONE, 0,	"RailClip" },
		{ "RailGunCore",		"Railgun Core", 					AMMO_CELL, 20, AMMO_NONE, 0,	"Component" },
		{ "Freezethrower",		"Freezethrower",					AMMO_CELL, 40, AMMO_NONE, 0,	"None" },
	},
	{ // SniperRifle - 11
		{ "SniperRifle",		"Sniper Rifle",						AMMO_MECH, 20, AMMO_NONE, 0,	"None" },
		{ "TailsSniperRifle",	"Sniper Rifle", 					AMMO_MECH, 20, AMMO_NONE, 0,	"None" },
		{ "M1911",				"Colt M1911",						AMMO_MECH, 20, AMMO_NONE, 0,	"Duke64Clip" },
	},
	{ // P90 - 12
		{ "P90",				"FN-P90",							AMMO_MECH, 50, AMMO_NONE, 0,	"P90Clip" },
		{ "BCF-2Repeaters",		"BCF-2 Repeaters", 					AMMO_MECH, 50, AMMO_NONE, 0,	"None" },
		{ "RipperChaingun",		"EDF ''Ripper'' Chaingun",			AMMO_MECH, 50, AMMO_NONE, 0,	"None" },
	},
	{ // Casull - 13
		{ "454Casull",			"Hellsing Arms .454 Casull",		AMMO_MECH, 24, AMMO_NONE, 0,	"CasullClip" },
		{ "BCF-2Repeaters",		"BCF-2 Repeaters", 					AMMO_MECH, 32, AMMO_NONE, 0,	"None" },
		{ "M1911",				"Colt M1911",						AMMO_MECH, 24, AMMO_NONE, 0,	"Duke64Clip" },
	}
};

function bool GrantWeapon(int type, bool dropped, bool notpickup)
{
	int class = PlayerClass(PlayerNumber());
	
	bool weaponstay = GetCvar("sv_weaponstay");
	bool hasweapon = (CheckInventory(class_weapons[type][class].actor) > 0);
	
	bool stay = false;
	bool givegun = false;
	
	bool weapondefined = (StrIcmp(class_weapons[type][class].actor, "None") != 0);
	bool clipdefined = (StrIcmp(class_weapons[type][class].clip_actor, "None") != 0);
	bool iscomponent = (StrIcmp(class_weapons[type][class].clip_actor, "Component") == 0);
	
	int ammo1type = class_weapons[type][class].ammo1_type;
	int ammo1count = class_weapons[type][class].ammo1_count;
	
	int ammo2type = class_weapons[type][class].ammo2_type;
	int ammo2count = class_weapons[type][class].ammo2_count;
	
	int ammofactor = 1;
	
	if(dropped) // Halve ammo if dropped.
	{
		ammo1count /= 2;
		ammo2count /= 2;
	}
	
	if((GameSkill() == 0) || (GameSkill() == 4) || GetCvar("sv_doubleammo"))
	{
		ammofactor = 2;
	}
	
	if( (weaponstay) && (!dropped) ) // If weapon stay is on and isn't dropped.
	{
		stay = true;
		
		if(weapondefined && !hasweapon) // Check if the weapon is defined and not in player's possession.
		{
			givegun = true;
		}
	}
	else // If the weapon is dropped or weapon stay is off
	{
		bool ammo1full = false;
		bool ammo2full = false;
		
		if(hasweapon)
		{
			if(ammo1type > 0)
			{
				int currentammo1 = CheckInventory(ammo_types[ammo1type].actor);
				int capacity1 = GetAmmoCapacity(ammo_types[ammo1type].actor);
				
				if(currentammo1 >= capacity1)
				{
					ammo1full = true;
				}
			}
			else
			{
				ammo1full = true;
			}
			
			if(ammo2type > 0)
			{
				int currentammo2 = CheckInventory(ammo_types[ammo2type].actor);
				int capacity2 = GetAmmoCapacity(ammo_types[ammo2type].actor);
				
				if(currentammo2 >= capacity2)
				{
					ammo2full = true;
				}
			}
			else
			{
				ammo2full = true;
			}
		}
		
		if(ammo1full && ammo2full)
		{
			givegun = false;
			stay = true;
		}
		else
		{
			givegun = true;
			stay = false;
		}
	}
	
	if(givegun)
	{
		SetHudSize(640, 400, 1);
		
		if(weapondefined)
		{
			GiveInventory(class_weapons[type][class].actor, 1);
		
			if(!hasweapon)
			{
				if(clipdefined && !iscomponent)
				{
					GiveInventory(class_weapons[type][class].clip_actor, 999);
				}
			}
			
			if(!notpickup)
			{
				SetFont("BIGFONT");
			
				ActivatorSound("misc/w_pkup", 127);	
				FadeRange (0, 255, 0, 0.25, 0, 255, 0, 0.0, 0.5);
		
				if(!hasweapon && !iscomponent)
				{
					HudMessage(s:"New Weapon!";
					HUDMSG_FADEOUT, 0, CR_CYAN, 320.0, 56.0, 2.5, 0.5);
					
					LocalAmbientSound("NewWeapon", 100);
				}
				else if(!hasweapon && iscomponent)
				{
					HudMessage(s:"New Component!";
					HUDMSG_FADEOUT, 0, CR_CYAN, 320.0, 56.0, 2.5, 0.5);
				}
			
				HudMessage(s:class_weapons[type][class].name;
				HUDMSG_FADEOUT, 100, CR_GREEN, 320.0, 72.0, 3.0, 0.5);
			}
		}
		
		SetFont("SMALLFONT");
		if(ammo1type > 0)
		{
			GiveInventory(ammo_types[ammo1type].actor, ammo1count);
			
			if(ammo2type > 0)
			{
				HudMessage(s:"+", d:ammo1count*ammofactor, s:" ", s:ammo_types[ammo1type].name, s:" & +", d:ammo2count*ammofactor, s:" ", s:ammo_types[ammo2type].name;
				HUDMSG_FADEOUT, 101, CR_GOLD, 320.0, 88.0, 3.0, 0.5);
			}
			else
			{
				HudMessage(s:"+", d:ammo1count*ammofactor, s:" ", s:ammo_types[ammo1type].name;
				HUDMSG_FADEOUT, 101, CR_GOLD, 320.0, 88.0, 3.0, 0.5);
			}
		}
			
		if(ammo2type > 0)
		{
			GiveInventory(ammo_types[ammo2type].actor, ammo2count);
		}
	}
	
	return stay;
}

script "GIVEWEAPON" (int type, int dropped)
{
	SetResultValue(GrantWeapon(type, dropped, false));
}

script "PICKUPSTATE" (void) CLIENTSIDE
{
	if(client_class > NumClasses)
	{
		terminate;
	}
	
	SetActorState(0, class_states[client_class], false);
	SetActorProperty(0, APROP_ScaleX, GetUserVariable(0, "user_scale")*0.01);
	SetActorProperty(0, APROP_ScaleY, GetUserVariable(0, "user_scale")*0.01);
}

function void GetClass(void)
{
	if((ConsolePlayerNumber() == PlayerNumber()) && (ConsolePlayerNumber() != -1))
	{
		client_class = PlayerClass(PlayerNumber());
	}
}

script "GETCLASS_ENTER" ENTER CLIENTSIDE
{
	GetClass();
}

script "GETCLASS_RESPAWN" RESPAWN CLIENTSIDE
{
	GetClass();
}

struct SMMPInventory
{
	str actor;
	str name;
}

#define NumInventoryItems 5
SMMPInventory inventory[NumInventoryItems] = {
	{ "MolotovCocktail", "Molotov Cocktail" },
	{ "HealingSerum", "Healing Serum" },
	{ "ForceJump", "Force Jump" },
	{ "ForcePull", "Force Pull" },
	{ "FragGrenade", "Frag Grenade" },
	{ "FartBombs", "Fart Grenade" }
};

#define NumRunes 11
str runes[NumRunes] = { 
	"SpreadRune", 
	"RageRune", 
	"HighJumpRune", 
	"DrainRune",
	"HasteRune", 
	"StrengthRune", 
	"ProsperityRune", 
	"RegenerationRune",
	"ResistanceRune", 
	"Kamikaze", 
	"Kamikaze" 
};

script "MYSTERY_ITEM" (void)
{
	if(CheckInventory("MysteryPowerupInUse"))
	{
		terminate;
	}
	
	int class = PlayerClass(PlayerNumber());
	int weapon_picked = random(0, NumWeapons-1);	
	
	int inventory_picked = random(0, NumInventoryItems-1);
	int inventory_picked_2 = random(0, NumInventoryItems-1);
	
	int rune_picked = random(0, NumRunes-1);
	
	int inventory_amount = random(1, 3);
	int inventory_amount_2 = random(1, 3);
	
	bool weapon_none = false;
	bool inventory_none = false;
	bool inventory_none_2 = false;
	bool rune_none = false;
	bool backpack_none = false;
	
	GiveInventory("MysteryPowerupInUse", 1);
	
	LocalAmbientSound("MysteryItem", 100);
	SetHudSize(640, 400, 1);
	SetFont("BigFont");
	
	HudMessage(s:"Mystery Item!";
		HUDMSG_FADEINOUT, 0, CR_PURPLE, 16.1, 150.0, 8.0, 0.5, 0.25);
	HudMessage(s:".....................";
		HUDMSG_TYPEON, 0, CR_BLUE, 16.1, 160.0, 6.0, 0.1, 0.25);
	
	if(random(1, 100) <= 50)
	{
		while(StrIcmp(class_weapons[weapon_picked][class].actor, "None") == 0)
		{
			weapon_picked = random(0, NumWeapons-1);	
		}
		
		GrantWeapon(weapon_picked, 0, true);
	}
	else
	{
		weapon_none = true;
	}
	
	if(random(1, 100) <= 75)
	{
		GiveInventory(inventory[inventory_picked].actor, inventory_amount);
		
		if(random(1, 100) <= 35)
		{
			GiveInventory(inventory[inventory_picked_2].actor, inventory_amount_2);
		}
		else
		{
			inventory_none_2 = true;
		}
		
	}
	else
	{
		inventory_none = true;
		inventory_none_2 = true;
	}
	
	if(random(1, 100) <= 25) { GiveInventory(runes[rune_picked], 1); }
	else { rune_none = true; }
	
	if(weapon_none == false || inventory_none == false || rune_none == false)
	{
		if(random(1, 100) <= 50) { GiveInventory("Backpack", 1); }
		else { backpack_none = true; }
	}
	
	delay(96);
	SetFont("SmallFont");
	
	if(GetActorProperty(0, APROP_HEALTH) <= 0)
	{
		LocalAmbientSound("DeadNotBigSurprise", 127);
		HudMessage(s:"You are dead. Not Big Surprise.";
		HUDMSG_FADEINOUT, 0, CR_RED, 16.1, 175.0, 5.0, 0.5, 0.25);
		terminate;
	}
	
	if(weapon_none == true)
	{
		LocalAmbientSound("Fart", 100);
		HudMessage(s:"No Weapon!";
		HUDMSG_FADEINOUT, 0, CR_RED, 16.1, 175.0, 5.0, 0.5, 0.25);
	}
	else
	{
		LocalAmbientSound("WinMysteryItem", 100);
		HudMessage(s:"Weapon: \cv", s:class_weapons[weapon_picked][class].name;
		HUDMSG_FADEINOUT, 0, CR_GREEN, 16.1, 175.0, 5.0, 0.5, 0.25);
	}
	
	delay(35);
	SetFont("SmallFont");
	
	if(GetActorProperty(0, APROP_HEALTH) <= 0)
	{
		LocalAmbientSound("DeadNotBigSurprise", 127);
		HudMessage(s:"You won a shot to the face, congrats!";
		HUDMSG_FADEINOUT, 0, CR_RED, 16.1, 185.0, 5.0, 0.5, 0.25);
		terminate;
	}
	
	if(inventory_none == true && inventory_none_2 == true)
	{
		LocalAmbientSound("Fart", 100);
		HudMessage(s:"No Inventory Item!";
		HUDMSG_FADEINOUT, 0, CR_RED, 16.1, 185.0, 5.0, 0.5, 0.25);
	}
	else
	{
		if(inventory_none_2 == true)
		{
			LocalAmbientSound("WinMysteryItem", 100);
			HudMessage(s:"Inventory Item: \cv", d:inventory_amount, s:" ", s:inventory[inventory_picked].name,s:"(s)";
			HUDMSG_FADEINOUT, 0, CR_GREEN, 16.1, 185.0, 5.0, 0.5, 0.25);
		}
		else if(inventory_picked == inventory_picked_2)
		{
			LocalAmbientSound("WinMysteryItem", 100);
			HudMessage(s:"Inventory Item: \cv", d:inventory_amount+inventory_amount_2, s:" ", s:inventory[inventory_picked].name,s:"(s)";
			HUDMSG_FADEINOUT, 0, CR_GREEN, 16.1, 185.0, 5.0, 0.5, 0.25);
		}
		else if(inventory_picked != inventory_picked_2)
		{
			LocalAmbientSound("WinMysteryItem", 100);
			HudMessage(s:"Inventory Item: \cv", d:inventory_amount, s:" ", s:inventory[inventory_picked].name, s:"(s) & ", d:inventory_amount_2, s:" ", s:inventory[inventory_picked_2].name, s:"(s)";
			HUDMSG_FADEINOUT, 0, CR_GREEN, 16.1, 185.0, 5.0, 0.5, 0.25);
		}
	}
	
	delay(35);
	SetFont("SmallFont");
	
	if(GetActorProperty(0, APROP_HEALTH) <= 0)
	{
		LocalAmbientSound("DeadNotBigSurprise", 127);
		HudMessage(s:"Never Mind...";
		HUDMSG_FADEINOUT, 0, CR_RED, 16.1, 195.0, 5.0, 0.5, 0.25);
		terminate;
	}
	
	if(rune_none == true)
	{
		LocalAmbientSound("Fart", 100);
		HudMessage(s:"No Rune!";
		HUDMSG_FADEINOUT, 0, CR_RED, 16.1, 195.0, 5.0, 0.5, 0.25);
	}
	else
	{
		LocalAmbientSound("WinMysteryItem", 100);
		HudMessage(s:"Rune: \cv", s:runes[rune_picked];
		HUDMSG_FADEINOUT, 0, CR_GREEN, 16.1, 195.0, 5.0, 0.5, 0.25);
	}
	
	delay(35);
	SetFont("SmallFont");
	
	if(GetActorProperty(0, APROP_HEALTH) <= 0)
	{
		LocalAmbientSound("DeadNotBigSurprise", 127);
		HudMessage(s:"Aaaand you're dead...";
		HUDMSG_FADEINOUT, 0, CR_RED, 16.1, 215.0, 5.0, 0.5, 0.25);
		terminate;
	}
	
	if(weapon_none == true && inventory_none == true && rune_none == true)
	{
		LocalAmbientSound("Fail", 127);
	}
	else if(weapon_none == false || inventory_none == false || rune_none == false)
	{
		if(backpack_none == false)
		{
			LocalAmbientSound("WinMysteryItemBonus", 100);
			HudMessage(s:"Backpack Bonus!";
			HUDMSG_FADEINOUT, 0, CR_LIGHTBLUE, 16.1, 215.0, 5.0, 0.5, 0.25);
		}
	}
	
	TakeInventory("MysteryPowerupInUse", 1);
}