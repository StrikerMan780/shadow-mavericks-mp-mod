#library "COREACS"
#include "zcommon.acs"
#include "SMMP_DEFINES.ECH"

// COREACS.ACS - Core/Spawn functions

int Instagib;
int Buckshot;
int Crickagib;
int ClassAllowed;
int RailOnce = 0;
int PlayerJumpCheck[64];
int PlayerAbilityCooldown[64];
int PlayerLastDemonicPower[64];
int PlayerThrowableCooldown[64];

str OldWeapon[64];

function void init_buckshot (void)
{
	ClearInventory();
	GiveInventory("Backpack", 1);
	GiveInventory("SpreadAmmo", 100);
	GiveInventory("SM_SuperShotgun", 1);
	SetWeapon("SM_SuperShotgun");
}

function void init_crickagib (void)
{
	ClearInventory();
	GiveInventory("Backpack", 1);
	GiveInventory("FusionAmmo", 200);
	GiveInventory("Noisy_Cricket", 1);
	SetWeapon("Noisy_Cricket");
}

function void Reset_Classes (int class)
{
	switch(class)
	{
		case CLASS_MARINE:
		{
			GiveInventory("FlareCheck", 100);
			GiveInventory("MarineClassCheck", 1);

			TakeInventory("TailsClassCheck", 1);
			TakeInventory("DukeClassCheck", 1);
			break;
		}
		case CLASS_TAILS:
		{
			GiveInventory("TailsClassCheck", 1);

			TakeInventory("MarineClassCheck", 1);
			TakeInventory("DukeClassCheck", 1);
			break;
		}
		case CLASS_DUKE:
		{
			GiveInventory("DukeClassCheck", 1);

			TakeInventory("MarineClassCheck", 1);
			TakeInventory("TailsClassCheck", 1);
			break;
		}
	}
}

function void Check_Class_Block (int class)
{
	if( (class == CLASS_MARINE) && (GetCVar("smmp_block_marine")) )
	{
		KickFromGame(PlayerNumber(), "Marine class is blocked!");
	}
	else if( (class == CLASS_TAILS) && (GetCVar("smmp_block_tails")) )
	{
		KickFromGame(PlayerNumber(), "Tails class is blocked!");
	}
	else if( (class == CLASS_DUKE) && (GetCVar("smmp_block_duke")) )
	{
		KickFromGame(PlayerNumber(), "Duke class is blocked!");
	}
}

function void set_colors(void)
{
	TakeInventory("RailColor", 999);
	TakeInventory("SaberColor", 999);
	
	GiveInventory("RailColor", GetUserCVar(PlayerNumber(), "railcolor"));
	GiveInventory("SaberColor", GetUserCVar(PlayerNumber(), "smmp_sabercolor"));
}

// Auto-taunts
#define TAUNT_KILL 0
#define TAUNT_ENTRY 1
#define TAUNT_RESPAWN 2
function void MakeTaunt(int type)
{
	int ClassSelected = PlayerClass(PlayerNumber());
	if(GetActorProperty(0, APROP_Health) <= 0)
		return;
		
	if(type == TAUNT_KILL)
	{
		if(random(0, 100) <= 15)
		{
			switch(ClassSelected)
			{
				case CLASS_MARINE:
					PlaySound(0, "MarineKill", CHAN_6, 1.0, false, 0.75, false);
					break;
				case CLASS_DUKE:
					PlaySound(0, "DukeOneLiner", CHAN_6, 1.0, false, 0.75, false);
					break;
			}
		}
	}
	else if(type == TAUNT_ENTRY)
	{
		if(random(0, 100) <= 75)
		{
			switch(ClassSelected)
			{
				case CLASS_DUKE:
					PlaySound(0, "DukeEntry", CHAN_6, 1.0, false, 0.75, false);
					break;
			}
		}
	}
	else if(type == TAUNT_ENTRY)
	{
		if(random(0, 100) <= 40)
		{
			switch(ClassSelected)
			{
				case CLASS_DUKE:
					PlaySound(0, "DukeRespawn", CHAN_6, 1.0, false, 0.75, false);
					break;
			}
		}
	}
}

function void smmp_spawn (int respawned)
{
	int player_num = PlayerNumber();
	Instagib = GetCVar("Instagib");
	Buckshot = GetCVar("Buckshot");
	Crickagib = GetCVar("smmp_crickagib");
	int ClassSelected = PlayerClass(player_num);

	Reset_Classes(ClassSelected);
	Check_Class_Block(ClassSelected); 
	
	set_colors();
	
	// Variable resets
	PlayerThrowableCooldown[player_num] = false;
	
	if(respawned >= 1)
	{
		MakeTaunt(TAUNT_RESPAWN);
		if(GetCvar("smmp_keepdp"))
		{
			TakeInventory("DemonicPower", 999);
			GiveInventory("DemonicPower", PlayerLastDemonicPower[player_num]);
			if(CheckInventory("DemonicPower") < 100)
			{
				TakeInventory("DemonicPower", 5);
			}
		}
	}
	else
	{
		MakeTaunt(TAUNT_ENTRY);
		PlayerAbilityCooldown[player_num] = false;
		PlayerLastDemonicPower[player_num] = 0;
	}
	
	if(CheckInventory("ValkrieCannons") >= 1 || CheckInventory("DeathbringerCannons") >= 1)
	{
		TakeInventory("ValkrieCannons", 999);
		TakeInventory("DeathbringerCannons", 999);
	}

	if(Crickagib == 1)
	{
		init_crickagib();
	}

	if(Buckshot == 1)
	{
		init_buckshot();
	}
	
	if(GameType() == GAME_NET_DEATHMATCH)
	{
		GiveInventory("IsDeathmatch", 1);
	}
}

function void smmp_clientsidespawn (void)
{
	if((ConsolePlayerNumber() != PlayerNumber()) || (ConsolePlayerNumber() == -1))
	{
		return;
	}
	
	int OpenGL = GetCVar("vid_renderer");
	
	if(OpenGL <= 0)
	{
		SetFont("DoomFont");
		hudmessage(s:"\cgERROR!\cf: \cc THIS MOD IS FOR \cgOPENGL ONLY!\n\ccPLEASE SWITCH TO OPENGL IN ORDER FOR THIS MOD TO WORK CORRECTLY!";
		HUDMSG_FADEINOUT | HUDMSG_LOG, 0, CR_RED, 1.5, 0.5, 6.0, 2.0, 2.0);
	}
}

function void GiveDP(int amount)
{
	int current_dp = CheckInventory("DemonicPower");
	if(current_dp >= 100 || PlayerAbilityCooldown[PlayerNumber()])
		return;
	
	if(GameType() == GAME_NET_DEATHMATCH)
	{
		if(PlayerFrags() < 0)
		{
			amount *= 2;
		}
	}
		
	if(current_dp+amount > 100)
		amount = 100-current_dp;
		
	SetFont("BIGFONT");
	SetHudSize(800, 600, 1);
	
	HudMessage(s:"+", d:amount, s:" DP";
	HUDMSG_FADEOUT, 766, CR_RED, 400.0, 598.2, 1.0, 0.25);
	
	if(amount + current_dp >= 100)
	{
		HudMessage(s:"DP Full!\n\cjPress \cd", k:"+use", s:"\n\cjand \cd", k:"SpecialMove", s:"\n\cjto use your ultimate ability!";
		HUDMSG_FADEOUT | HUDMSG_LOG, 765, CR_ORANGE, 400.4, 480.2, 6.0, 1.0);
		LocalAmbientSound("DPFull", 127);
	}
		
	GiveInventory("DemonicPower", amount);
}

// ****************
// START OF SCRIPTS
// ****************

script "GIVEDP" (int amount)
{
	GiveDP(amount);
}

script "DEMONIC_POWER" KILL
{
	if(GetCvar("smmp_debug"))
	{
		str DamageType = GetActorProperty(0, APROP_DamageType);
		printbold(s:"Kill Damage Type: ", s:DamageType);
	}
	
	if (!(ClassifyActor(0) & ACTOR_MONSTER) || GetActorProperty(0, APROP_Friendly))
		terminate;
	
	int monster_dp = GetActorProperty(0, APROP_SpawnHealth)/50;
	if(monster_dp <= 0)
		monster_dp = 1;
	
	SetActivator(0, AAPTR_TARGET);
	GiveDP(monster_dp);
	MakeTaunt(TAUNT_KILL);
}

script "DEATHINVENTORY" DEATH
{
	int dying_player = PlayerNumber();
	TakeInventory("DrunkMode", 1);
	TakeInventory("DeathbringerCannons", 1);
	TakeInventory("ValkrieCannons", 1);
	PlayerLastDemonicPower[dying_player] = CheckInventory("DemonicPower");
	
	if(CheckInventory("Kamikaze") > 0)
	{
		SetActorState(0, "KamikazeDeath", 1);
		TakeInventory("Kamikaze", 1);
	}
	
	SetActivator(0, AAPTR_TARGET);
	if(PlayerNumber() != dying_player) // Suiciding player should not get DP.
	{
		GiveDP(10);
		MakeTaunt(TAUNT_KILL);
	}
}

script "CHAINSAWHEALTHCHECK" (void) 
{
	if(SetActivatorToTarget(0))
	{
		int SpawnHealth = GetActorProperty(0, APROP_SpawnHealth);
		if(SpawnHealth <= 0) { SpawnHealth = 100; }
		
		if(GetActorProperty(0, APROP_Health) <= SpawnHealth/4)
		{
			GiveInventory("ChainsawHealthCritical", 1);
		}
		else
		{
			TakeInventory("ChainsawHealthCritical", 1);
		}
	}
}

script "FLARECHECK" (void) // Marine Flare Check Giver
{
	while(CheckInventory("FlareCheck") < 99)
	{
		GiveInventory("FlareCheck", 1);
		Delay(8);
	}
	GiveInventory("FlareCheck", 1);
}

script "FLIGHTCHECK" (void) // Tails Flight Check Giver
{
	if(CheckInventory("PowerFlight") == 1)
	{
		terminate;
	}

	if(CheckInventory("TailsFlightCheck") < 100 && CheckInventory("TailsFlightTrigger") == 0)
	{
		GiveInventory("TailsFlightCheck", 1);
	}
	else
	{
		TakeInventory("TailsFlightCheck", 100);
		GiveInventory("TailsFlightTrigger", 1);
	}
}

script "CLIENT_RESPAWN" RESPAWN CLIENTSIDE
{
	smmp_clientsidespawn();
}

script "CLIENT_ENTER" ENTER CLIENTSIDE
{
	smmp_clientsidespawn();
}

script "KNOCKOUT" (void)
{
	printbold(s:"\n\n\ccBrutal Shit-Beating courtesy of ",n:"",s:"\cc!");
	AmbientSound("KnockedTheFuckOut", 255);
	ACS_NamedExecuteAlways("GIVEMONEY", 0, 10);
}

script "SERVER_SPAWN" ENTER
{
	smmp_spawn(0);
}

script "SERVER_RESPAWN" RESPAWN
{
	smmp_spawn(1);
	
	if(GameType() == GAME_NET_COOPERATIVE)
	{
		SetFont("DoomFont");
		hudmessagebold(n:0, s: " \ccRespawns."; 
		HUDMSG_TYPEON, 4, CR_WHITE, -0.02, 0.1, 1.0, 0.02, 1.8);
	}
}

script "TPUPGRADE" (int fail)
{
	if(!fail)
	{
		Print(s:"TechPistol Upgrade!\n\ccNew Technology Integrated.\n\n\ciTails:\cc Aaand Presto!");
		TakeInventory("ProtonTorpedoLauncher", 1);
		TakeInventory("PlasmaCannon", 1);
		TakeInventory("ProtonGrenadeLauncher", 1);
		GiveInventory("TechUpgraded", 1);
		SetWeapon("Tails_Techpistol");
	}
	else
	{
		Print(s:"\ciTails:\cc I am going to need parts from a Plasma Cannon,\n\ccand two Proton Based weapons before I can Upgrade my TLS-912.");
		GiveInventory("TailsWeaponUpgrade", 1);
	}
}

script "HITCROSS" (void) CLIENTSIDE
{
	SetHudSize(1024, 768, 0);
	SetFont("HITCROSS");
	LocalAmbientSound("hitsound", 64);
	
	HudMessage(s:"A";
	HUDMSG_FADEOUT, 0, CR_UNTRANSLATED, 512.4, 384.0, 1, 0.5);
}

script "ZA_WARUDO" (void)
{
	PlaySound(0, "ZaWarudo", CHAN_5 | CHAN_NOPAUSE, 1.0, false, ATTN_NONE);
	delay(64);
	GiveInventory("TimeFreezeGiver", 1);
	FadeRange(255, 255, 255, 0.75, 255, 255, 255, 0.0, 1.0);
	delay(35*12);
	PlaySound(0, "ZaWarudoStop", CHAN_5 | CHAN_NOPAUSE, 1.0, false, ATTN_NONE);
}

#define NumForbiddenItems 10
str forbidden_items[NumForbiddenItems] = {
	"CannotUse",
	"PowerPossessionArtifact",
	"ValkrieCannons",
	"DeathbringerCannons",
	"PowerFlight",
	"RedFlag",
	"BlueFlag",
	"WhiteFlag",
	"BlueSkullST",
	"RedSkullST"
};

script "SPECIALMOVE" (void) NET
{
	int ClassSelected = PlayerClass(PlayerNumber());
	
	for(int i = 0; i < NumForbiddenItems; i++)
	{
		if(CheckInventory(forbidden_items[i]) > 0)
		{
			Print(s:"You cannot use this right now.");
			terminate;
		}
	}
	
	if(GetActorProperty(0, APROP_Health) <= 0)
	{
		Print(s:"You cannot use this while dead.");
		terminate;
	}
	
	if(GetPlayerInput(PlayerNumber(), INPUT_BUTTONS) & BT_USE)
	{
		if(CheckInventory("DemonicPower") < 100)
		{
			Print(s:"Not enough Demonic Power for ultimate attack.");
		}
		else
		{
			switch(ClassSelected)
			{
				case CLASS_MARINE:
					TakeInventory("DemonicPower", 100);
					GiveInventory("CannotUse", 1);
					
					// Properties
					SetActorProperty(0, APROP_DamageFactor, 0.0);
					SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
					
					// State
					SetActorState(0, "WrathOfTheWickedSpirits", 0);
					break;
				case CLASS_TAILS:
					TakeInventory("DemonicPower", 100);
					GiveInventory("CannotUse", 1);
					
					// Properties
					SetPlayerProperty(0, 1, PROP_FROZEN);
					SetActorProperty(0, APROP_DamageFactor, 0.0);
					
					// Memorize Weapon & Force BlankWeapon
					SetPlayerProperty(0, 1, PROP_INSTANTWEAPONSWITCH);
					OldWeapon[PlayerNumber()] = GetWeapon();
					GiveInventory("BlankWeapon", 1);
					SetWeapon("BlankWeapon");
					SetPlayerProperty(0, 0, PROP_INSTANTWEAPONSWITCH);
					
					// State
					SetActorState(0, "ChaosDash", 0);
					break;
				default:
					Print(s:"This class does not have an ultimate attack... yet.");
					break;
			}
			
			PlayerAbilityCooldown[PlayerNumber()] = true;
			Delay(35 * 10);
			PlayerAbilityCooldown[PlayerNumber()] = false;
		}
	}
	else
	{
		switch(ClassSelected)
		{
			case CLASS_MARINE:
				if(CheckInventory("FlareCheck") >= 100)
				{
					TakeInventory("FlareCheck", 100);
					GiveInventory("FlareThrow", 1);
				}
				break;
			case CLASS_TAILS:
				GiveInventory("CannotUse", 1);
				SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
				
				// Memorize Weapon & Force BlankWeapon
				SetPlayerProperty(0, 1, PROP_INSTANTWEAPONSWITCH);
				OldWeapon[PlayerNumber()] = GetWeapon();
				GiveInventory("BlankWeapon", 1);
				SetWeapon("BlankWeapon");
				SetPlayerProperty(0, 0, PROP_INSTANTWEAPONSWITCH);
				
				// State
				SetActorState(0, "Spin", 1);
				break;
			default:
				Print(s:"This class does not have a special ability... yet.");
				break;
		}
	}
}

script "STOPABILITY" DEATH
{ 
	int ClassSelected = PlayerClass(PlayerNumber());
	int player_num = PlayerNumber();

	switch(ClassSelected)
	{
		case CLASS_TAILS:
			TakeInventory("BlankWeapon", 1);
			if(OldWeapon[player_num] != 0)
			{
				SetWeapon(OldWeapon[player_num]);
				OldWeapon[player_num] = 0;
			}
			break;
	}
	
	ACS_NamedExecuteAlways("STOPCAMERA", 0);
	SetActorProperty(0, APROP_DamageFactor, 1.0);
	SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
	SetPlayerProperty(0, 0, PROP_FROZEN);
	TakeInventory("CannotUse", 1); 
}

script "JUMPCHECK" (void) 
{
	PlayerJumpCheck[PlayerNumber()] = 1;
	Delay(1);
	PlayerJumpCheck[PlayerNumber()] = 0;
}

script "THROWABLETIMER" (void)
{
	int player_num = PlayerNumber();
	if(PlayerThrowableCooldown[player_num] || (GetActorProperty(0, APROP_Health) <= 0))
	{
		SetResultValue(0);
		terminate;
	}
	
	SetResultValue(1); // Do this before delaying
	
	PlayerThrowableCooldown[player_num] = true;
	Delay(35);
	PlayerThrowableCooldown[player_num] = false;
}

script "QUICKTHROW" (void) NET
{
	int player_num = PlayerNumber();
	
	if(PlayerThrowableCooldown[player_num] || (GetActorProperty(0, APROP_Health) <= 0))
		terminate;
	
	if(CheckInventory("MolotovCocktail"))
	{
		GiveInventory("MolotovCocktail_QuickThrow", 1);
		TakeInventory("MolotovCocktail", 1);
	}
	else if(CheckInventory("FragGrenade"))
	{
		GiveInventory("FragGrenade_QuickThrow", 1);
		TakeInventory("FragGrenade", 1);
	}
	else if(CheckInventory("FartBombs"))
	{
		GiveInventory("FartBombs_QuickThrow", 1);
		TakeInventory("FartBombs", 1);
	}
	else
	{
		Print(s:"You have no throwables!\n");
	}
}