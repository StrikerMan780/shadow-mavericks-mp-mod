#library "COREACS"
#include "zcommon.acs"

int Instagib;
int Buckshot;
int Crickagib;
int ClassSelected;
int ClassAllowed;
int RailOnce = 0;
int PlayerJumpCheck[64];

// 907 to 911 for Weather System
// 917 for Mystery Item
// 918 for Footsteps
// 928 for Enter
// 929 for Respawn
// 930 and 931 used by taunt system!
// 932 for Footstep Disconnect Check
// 933, 934, 935, 936, 937 for Drunk Mode
// 961 for Init Footsteps
// 963 for giveweapon

#define CLASS_MARINE 0
#define CLASS_TAILS 1
#define CLASS_LINK 2
#define CLASS_DUKE 3

function void init_buckshot (void)
{
	ClearInventory();
	GiveInventory("Backpack", 1);
	GiveInventory("SpreadAmmo", 100);
	GiveInventory("SM_SuperShotgun", 1);
	SetWeapon("SM_SuperShotgun");
}

function void init_crickagib (void)
{
	ClearInventory();
	GiveInventory("Backpack", 1);
	GiveInventory("CricketAmmo", 50);
	GiveInventory("Noisy_Cricket", 1);
	SetWeapon("Noisy_Cricket");
}

function void set_railcolor (void)
{
	int RailColor = GetCvar("RailColor");
	NamedRequestScriptPuke("RAILCOLOR", RailColor, ActivatorTID());
}

function void Reset_Classes (int class)
{
	switch(class)
	{
		case CLASS_MARINE:
		{
			GiveInventory("FlareCheck", 100);
			GiveInventory("MarineClassCheck", 1);

			TakeInventory("TailsClassCheck", 1);
			TakeInventory("LinkClassCheck", 1);
			TakeInventory("DukeClassCheck", 1);
			break;
		}
		case CLASS_TAILS:
		{
			GiveInventory("VilesBane", 5);
			GiveInventory("TailsClassCheck", 1);

			TakeInventory("MarineClassCheck", 1);
			TakeInventory("LinkClassCheck", 1);
			TakeInventory("DukeClassCheck", 1);
			break;
		}
		case CLASS_LINK:
		{
			GiveInventory("LinkClassCheck", 1);

			TakeInventory("MarineClassCheck", 1);
			TakeInventory("TailsClassCheck", 1);
			TakeInventory("DukeClassCheck", 1);
			break;
		}
		case CLASS_DUKE:
		{
			GiveInventory("DukeClassCheck", 1);

			TakeInventory("MarineClassCheck", 1);
			TakeInventory("TailsClassCheck", 1);
			TakeInventory("LinkClassCheck", 1);
			break;
		}
	}
}

function void Check_Class_Block (int class)
{
	if( (class == CLASS_MARINE) && (GetCVar("smmp_block_marine")) )
	{
		KickFromGame(PlayerNumber(), "Marine class is blocked!");
	}
	else if( (class == CLASS_TAILS) && (GetCVar("smmp_block_tails")) )
	{
		KickFromGame(PlayerNumber(), "Tails class is blocked!");
	}
	else if( (class == CLASS_LINK) && (GetCVar("smmp_block_link")) )
	{
		KickFromGame(PlayerNumber(), "Link class is blocked!");
	}
	else if( (class == CLASS_DUKE) && (GetCVar("smmp_block_duke")) )
	{
		KickFromGame(PlayerNumber(), "Duke class is blocked!");
	}
}

function void smmp_spawn (int respawned)
{
	Instagib = GetCVar("Instagib");
	Buckshot = GetCVar("Buckshot");
	Crickagib = GetCVar("smmp_crickagib");
	ClassSelected = PlayerClass(PlayerNumber());

	Reset_Classes(ClassSelected);
	Check_Class_Block(ClassSelected); 
	
	Thing_ChangeTID(0, UniqueTID(9900));
	
	if(respawned >= 1)
	{
		if(ClassSelected == CLASS_DUKE)
		{
			GiveInventory("SpeakRespawn", 1);
		}
	}
	else
	{
		if(ClassSelected == CLASS_DUKE)
		{
			GiveInventory("SpeakEntry", 1);
		}
	}
	
	if(CheckInventory("ValkrieCannons") >= 1 || CheckInventory("DeathbringerCannons") >= 1)
	{
		TakeInventory("ValkrieCannons", 999);
		TakeInventory("DeathbringerCannons", 999);
	}

	if(ClassSelected == CLASS_LINK && Instagib == 1 && Crickagib == 0)
	{
		ClearInventory();
		GiveInventory("FairyBow", 1);
		TakeInventory("CellAmmo", 999);
		GiveInventory("CellAmmo", 50);
		GiveInventory("RailGunCoreInstagib", 1);
		SetWeapon("FairyBow");
	}

	if(Crickagib == 1)
	{
		init_crickagib();
	}

	if(Buckshot == 1)
	{
		init_buckshot();
	}
	
	if(GameType() == GAME_NET_DEATHMATCH)
	{
		GiveInventory("IsDeathmatch", 1);
	}
}

function void smmp_clientsidespawn (void)
{
	if((ConsolePlayerNumber() != PlayerNumber()) || (ConsolePlayerNumber() == -1))
	{
		return;
	}
	
	int Interpolate = GetCVar("gl_interpolate_model_frames");
	int ModelsUsed = GetCVar("gl_use_models");
	int OpenGL = GetCVar("vid_renderer");
	
	set_railcolor();
	
	if(OpenGL <= 0)
	{
		SetFont("DoomFont");
		hudmessage(s:"\cgERROR!\cf: \cc THIS MOD IS FOR \cgOPENGL ONLY!\n\ccPLEASE SWITCH TO OPENGL IN ORDER FOR THIS MOD TO WORK CORRECTLY!";
		HUDMSG_FADEINOUT | HUDMSG_LOG, 0, CR_RED, 1.5, 0.5, 6.0, 2.0, 2.0);
	}
	else if(Interpolate <= 0 | ModelsUsed <= 0)
	{
		SetFont("DoomFont");
		hudmessage(s: "Models/Model Interpolation off! Resolve this \ccBy Typing \cf''\ciFix\cf'' \ccin the console."; 
		HUDMSG_FADEINOUT | HUDMSG_LOG, 0, CR_WHITE, 1.5, 0.1, 4.0, 2.0, 2.0);
	}
}

// ****************
// START OF SCRIPTS
// ****************

script "DEATHINVENTORY" DEATH
{
	TakeInventory("DemonicChargerCheck", 1);
	TakeInventory("DrunkMode", 1);
	TakeInventory("DeathbringerCannons", 1);
	TakeInventory("ValkrieCannons", 1);
	
	SetActivator(0, AAPTR_TARGET);
	GiveInventory("DemonicPower", 10);
}

script "CHAINSAWHEALTHCHECK" (void) 
{
	if(SetActivatorToTarget(0))
	{
		int SpawnHealth = GetActorProperty(0, APROP_SpawnHealth);
		if(SpawnHealth <= 0) { SpawnHealth = 100; }
		
		if(GetActorProperty(0, APROP_Health) <= SpawnHealth/4)
		{
			GiveInventory("ChainsawHealthCritical", 1);
		}
		else
		{
			TakeInventory("ChainsawHealthCritical", 1);
		}
	}
}

script "LIGHTNINGSOUND" (void) CLIENTSIDE
{
    LocalAmbientSound("world/localthunder", 96);
}

script "FLARECHECK" (void) // Marine Flare Check Giver
{
	while(CheckInventory("FlareCheck") < 99)
	{
		GiveInventory("FlareCheck", 1);
		Delay(8);
	}
	GiveInventory("FlareCheck", 1);
}

script "FLIGHTCHECK" (void) // Tails Flight Check Giver
{
	if(CheckInventory("PowerFlight") == 1)
	{
		terminate;
	}

	if(CheckInventory("TailsFlightCheck") < 100 && CheckInventory("TailsFlightTrigger") == 0)
	{
		GiveInventory("TailsFlightCheck", 1);
	}
	else
	{
		TakeInventory("TailsFlightCheck", 100);
		GiveInventory("TailsFlightTrigger", 1);
	}
}

script "CLIENT_RESPAWN" RESPAWN CLIENTSIDE
{
	smmp_clientsidespawn();
}

script "CLIENT_ENTER" ENTER CLIENTSIDE
{
	smmp_clientsidespawn();
}

script "GIVELIGHTNINGSOUND" LIGHTNING
{
    GiveActorInventory(0, "LightningSound", 1);
}

script "KNOCKOUT" (void)
{
	printbold(s:"\n\n\ccBrutal Shit-Beating courtesy of ",n:"",s:"\cc!");
	AmbientSound("KnockedTheFuckOut", 255);
	GiveInventory("GBTWMoney", 10);
}

script "DOWALLJUMP" (void)
{
	if(PlayerJumpCheck[PlayerNumber()] == 1)
	{
		if((GetActorZ(0) - GetActorFloorZ(0))>=30.0)
		{
			PlayerJumpCheck[PlayerNumber()] = 0;
			Thing_Stop(ActivatorTID());
			SetPlayerProperty (0, 1, 0);
			SetPlayerProperty (0, 1, 12);
			LocalAmbientSound("wallland",127);
			SetActorAngle(ActivatorTID(), GetActorAngle(ActivatorTID()) + 0.1);
			Delay(1);
			SetActorAngle(ActivatorTID(), GetActorAngle(ActivatorTID()) + 0.1);
			Delay(1);
			SetActorAngle(ActivatorTID(), GetActorAngle(ActivatorTID()) + 0.1);
			Delay(1);
			SetActorAngle(ActivatorTID(), GetActorAngle(ActivatorTID()) + 0.1);
			Delay(1);
			SetActorAngle(ActivatorTID(), GetActorAngle(ActivatorTID()) + 0.1);
			Delay(3);
			SetPlayerProperty (0, 0, 0);
			SetPlayerProperty (0, 0, 12);
			LocalAmbientSound("walljump",127);
			ThrustThing(GetActorAngle (ActivatorTID()) >> 8, 10, 1, 0);
			ThrustThingZ(ActivatorTID(), 29, 0, 1);
		}
	}
}

script "JUMPCHECK" (void) 
{
	PlayerJumpCheck[PlayerNumber()] = 1;
	Delay(1);
	PlayerJumpCheck[PlayerNumber()] = 0;
}

script "SERVER_SPAWN" ENTER
{
	smmp_spawn(0);
}

script "SERVER_RESPAWN" RESPAWN
{
	smmp_spawn(1);
	
	if(GameType() == GAME_NET_COOPERATIVE)
	{
		SetFont("DoomFont");
		hudmessagebold(n:0, s: " \ccRespawns."; 
		HUDMSG_TYPEON, 4, CR_WHITE, -0.02, 0.1, 1.0, 0.02, 1.8);
	}
}

script "TPUPGRADE" (int fail)
{
	if(!fail)
	{
		Print(s:"TechPistol Upgrade!\n\ccNew Technology Integrated.\n\n\ciTails:\cc Aaand Presto!");
		TakeInventory("ProtonTorpedoLauncher", 1);
		TakeInventory("PlasmaCannon", 1);
		TakeInventory("ProtonGrenadeLauncher", 1);
		GiveInventory("TechUpgraded", 1);
		SetWeapon("Tails_Techpistol");
	}
	else
	{
		Print(s:"\ciTails:\cc I am going to need parts from a Plasma Cannon,\n\ccand two Proton Based weapons before I can Upgrade my TLS-912.");
		GiveInventory("TailsWeaponUpgrade", 1);
	}
}

script "SPINATTACK" (void)
{ 
	if(CheckInventory("CannotSpin") == 0 && CheckInventory("CannotUse") == 0)
	{
		SetActorState(0, "Spin", 1);
		GiveInventory("CannotSpin", 1);
		SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
	}
}

script "STOPSPIN" DEATH
{ 
	if(CheckInventory("CannotSpin") == 1)
	{
		SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
		TakeInventory("CannotSpin", 1); 
	}
}

script "HITCROSS" (void) CLIENTSIDE
{
	SetHudSize(1024, 768, 0);
	SetFont("HITCROSS");
	LocalAmbientSound("hitsound", 64);
	
	HudMessage(s:"A";
	HUDMSG_FADEOUT, 0, CR_UNTRANSLATED, 512.4, 384.0, 1, 0.5);
}

script "RAILCOLOR" (int RailColor, int tid) NET
{
	SetActivator(tid);
	TakeInventory("RailColor", 999);
	
	if(RailColor > 0)
	{
		GiveInventory("RailColor", RailColor);
	}
	
	Thing_ChangeTID(tid, 0);
}