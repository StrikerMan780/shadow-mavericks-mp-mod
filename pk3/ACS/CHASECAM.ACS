#library "CHASECAM"
#include "zcommon.acs"

// CHASECAM.ACS - Chasecam code.

#define CAMERA_TID		5000	//Default camera tid
#define WAYPOINT_TID	5001	//Waypoint tid
#define VIEW_HEIGHT		48.0	//The approximate hight of the player's view

bool camera_mode;		//Variable for turning the camera on or off.
int playerheight;

function void OldCamera(int a, int p)
{
	int r = (GetCVar("chase_dist") >> 16);
	int xyr = r * cos (p) >> 16;
	int x = GetActorX (0) - cos(a)*xyr;
	int y = GetActorY (0) - sin(a)*xyr;
	int z = (GetActorZ (0) + playerheight) + sin(p)*r;
	SpawnForced("ChaseCamWaypoint", x, y, z, 0, a >> 8);
}
	
Script "STARTCAMERA" (VOID) CLIENTSIDE
{
	if((ConsolePlayerNumber() != PlayerNumber()) || (ConsolePlayerNumber() == -1))
	{
		Terminate;
	}
	
	playerheight = (GetActorProperty(0, APROP_Height)/2)-GetActorProperty(0, APROP_AttackZOffset);
	camera_mode = ON;
	ACS_NamedExecuteAlways("CHASECAM", 0);
}

Script "CHASECAM" (void) CLIENTSIDE
{
	if((ConsolePlayerNumber() != PlayerNumber()) || (ConsolePlayerNumber() == -1))
	{
		Terminate;
	}
	
	while (camera_mode == ON)
	{	
		int a = GetActorAngle(0);
		int p = GetActorPitch(0);
		
		if (!ThingCountName ("ChaseCam2", CAMERA_TID))
		{
			SpawnForced("ChaseCam2", GetActorX(0), GetActorY(0), GetActorZ(0), CAMERA_TID, 0);
			if (ThingCountName ("ChaseCam2", CAMERA_TID))
			{
				if(!IsNetworkGame())
				{
					LineAttack(0, a + 0.5, -p, 0, "ChaseCamWaypoint", "", GetCVar("chase_dist"), FHF_NORANDOMPUFFZ);
				}
				else // If Online, use old hacky chasecam. Remove if fixed.
				{
					OldCamera(a, p);
				}
				
				SetActorPitch (CAMERA_TID, p);
				SetActorAngle (CAMERA_TID, a);
				ChangeCamera (CAMERA_TID, 0, 0);
			}
			else
			{
				camera_mode = OFF;
				print (s:"Camera script failed to initialize.");
			}
		}
		else
		{
			if(!IsNetworkGame())
			{
				LineAttack(0, a + 0.5, -p, 0, "ChaseCamWaypoint", "", GetCVar("chase_dist"), FHF_NORANDOMPUFFZ);
			}
			else // If Online, use old hacky chasecam. Remove if fixed.
			{
				OldCamera(a, p);
			}
			SetActorPitch (CAMERA_TID, p);
			SetActorAngle (CAMERA_TID, a);
		}
		
		delay(1);
	}
}

Script "MOVECAMERA" (void) CLIENTSIDE
{
	Thing_ChangeTID(0, WAYPOINT_TID);
	SetActorPosition(WAYPOINT_TID, GetActorX(WAYPOINT_TID), GetActorY(WAYPOINT_TID), GetActorZ(WAYPOINT_TID)+playerheight+GetCVar("chase_height"), false);
	Warp(CAMERA_TID, 0, 0, 0, 0, WARPF_MOVEPTR | WARPF_INTERPOLATE, "", false, 0, 0, 0);
	Thing_Remove(WAYPOINT_TID);
}

Script "STOPCAMERA" DEATH CLIENTSIDE
{
	if((ConsolePlayerNumber() != PlayerNumber()) || (ConsolePlayerNumber() == -1))
	{
		Terminate;
	}
	
	if(camera_mode == ON)
	{
		camera_mode = OFF;
		Thing_Remove (CAMERA_TID);
	}
}

Script "STOPCAMERA_DISCONNECT" (int p_num) DISCONNECT CLIENTSIDE
{
	if(camera_mode == ON)
	{
		camera_mode = OFF;
		Thing_Remove (CAMERA_TID);
	}
}
